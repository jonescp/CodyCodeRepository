import java.util.Random;
import java.util.Scanner;

public class Sort {

	// Java program for implementation of Bubble Sort
	void bubbleSort(int arr[])
	{
		int n = arr.length;
		for (int i = 0; i < n-1; i++)
			for (int j = 0; j < n-i-1; j++)
				if (arr[j] > arr[j+1])
				{
					// swap arr[j+1] and arr[j]
					int temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
	}

	/* Prints the array */
	static void printArray(int arr[])
	{
		int n = arr.length;
		for (int i=0; i<n; ++i)
			System.out.print(arr[i] + " ");
		System.out.println();
	}

	// Driver method to test above
	public static void main(String args[])
	{
		Sort sort = new Sort();
		Scanner in = new Scanner(System.in);
		System.out.println("How long would you like your array? (make this a whole number between 0 and 10000)");
		int len = in.nextInt();
		if(len < 0 || len > 10000) {
			System.out.println("Invalid input, please restart program and try again");
			System.exit(0);
		}
		int arr[] = randArr(len);
		long startTime = System.nanoTime();
		sort.bubbleSort(arr);
		long finalTime = System.nanoTime() - startTime;
		System.out.println("Time for random bubble data: " + finalTime);
		//Test 1: printArray(arr);
		startTime = System.nanoTime();
		sort.bubbleSort(arr);
		finalTime = System.nanoTime() - startTime;
		System.out.println("Time for sorted bubble data: " + finalTime);
		int invertedArr[] = invertArr(arr, len);
		startTime = System.nanoTime();
		sort.bubbleSort(invertedArr);
		finalTime = System.nanoTime() - startTime;
		System.out.println("Time for reverse (inverse) bubble data: " + finalTime);
		
		Sort quickSort = new Sort();
		arr = randArr(len);
		startTime = System.nanoTime();
		Sort.quickSort(arr, 0, (len - 1));
		finalTime = System.nanoTime() - startTime;
		System.out.println("Time for random quick sort data: " + finalTime);
		//Test 1: printArray(arr);
		startTime = System.nanoTime();
		Sort.quickSort(arr, 0, (len-1));
		finalTime = System.nanoTime() - startTime;
		System.out.println("Time for sorted quick sort data: " + finalTime);
		invertedArr = invertArr(arr, len);
		startTime = System.nanoTime();
		Sort.quickSort(invertedArr, 0, (len-1));
		finalTime = System.nanoTime() - startTime;
		System.out.println("Time for reverse (inverse) quick sort data: " + finalTime);
	}
	static void swap(int[] arr, int i, int j)
	{
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	/* This function takes last element as pivot, places
	the pivot element at its correct position in sorted
	array, and places all smaller (smaller than pivot)
	to left of pivot and all greater elements to right
	of pivot */
	static int partition(int[] arr, int low, int high)
	{

		// pivot
		int pivot = arr[high];

		// Index of smaller element and
		// indicates the right position
		// of pivot found so far
		int i = (low - 1);

		for(int j = low; j <= high - 1; j++)
		{

			// If current element is smaller
			// than the pivot
			if (arr[j] < pivot)
			{

				// Increment index of
				// smaller element
				i++;
				swap(arr, i, j);
			}
		}
		swap(arr, i + 1, high);
		return (i + 1);
	}

	/* The main function that implements QuickSort
			arr[] --> Array to be sorted,
			low --> Starting index,
			high --> Ending index
	 */
	static void quickSort(int[] arr, int low, int high)
	{
		if (low < high)
		{

			// pi is partitioning index, arr[p]
			// is now at right place
			int pi = partition(arr, low, high);

			// Separately sort elements before
			// partition and after partition
			quickSort(arr, low, pi - 1);
			quickSort(arr, pi + 1, high);
		}
	}

	// Function to print an array
	static void printArray(int[] arr, int size)
	{
		for(int i = 0; i < size; i++)
			System.out.print(arr[i] + " ");

		System.out.println();
	}
    //function to make a random array of length n
    public static int[] randArr(int length){
        Random r = new Random();
        int ceiling = 1000000;

        int arr[] = new int[length];
        for(int i = 0; i < (length); i++){
            arr[i] = r.nextInt(ceiling);
        }
        return arr;
    }


    //function to invert an array (used on sorted arrays in this case)
    public static int[] invertArr(int[] arr, int len){
        int result[] = new int[len];

        int max = len;
        for(int i = 0; i < (len); i++){
            max = max - 1;
            result[max] = arr[i];
        }
        return result;
    }
}



/* Used code snippets from Rajat Mishra and Ayush Choudhary*/
